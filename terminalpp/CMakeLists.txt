# terminalpp application
# ======================
#
cmake_minimum_required (VERSION 3.5)

project(terminalpp VERSION ${TPP_VERSION})

# the list of libraries to link the executable with
set(TPP_LINK_LIBRARIES libuiterminal libtpp libui)

# Required Libraries and Tools
# ============================
#
# The native renderer not supported on macOS. On Linux, the X11, Freetype and xft libraries must be found. No extra setup is required for Windows.  
if(RENDERER_NATIVE) 
    if(ARCH_MACOS)
        message(FATAL_ERROR "Native renderer not supported on macOS")
    elseif(ARCH_UNIX)
        find_package(X11 REQUIRED)
        find_package(Freetype REQUIRED)
        include_directories(${X11_INCLUDE_DIR})
        include_directories(${FREETYPE_INCLUDE_DIRS})
        if (NOT X11_Xft_FOUND)
            message(FATAL_ERROR "xft not found - please install libxft-dev")
        endif()
        # link with the required libraries
        list(APPEND TPP_LINK_LIBRARIES ${X11_LIBRARIES} ${X11_Xft_LIB} ${X11_Xrender_LIB} ${X11_Xcursor_LIB} ${FREETYPE_LIBRARIES} fontconfig)
    endif()
# For the QT renderer, the Qt Installation must be found. This works out of the box on Linux, but Windows and macOS need some extra information. For windows, the version 5.14.1 and location C:\Qt is hardcoded, which macOS assumes that Qt was installed using brew. 
# On Windows shared QT libraries must be deployed together with the executable so the windeployqt exacutable must be found. 
elseif(RENDERER_QT)
#    if(ARCH_WINDOWS)
#        set(CMAKE_PREFIX_PATH "C:\\Qt\\6.1.0\\msvc2019_64")
#        message(STATUS "Qt will be looked for also in c:\\Qt\\6.1.0\\msvc2019_64")
#    elseif(ARCH_MACOS)
#        set(CMAKE_PREFIX_PATH "/usr/local/opt/qt")
#        message(STATUS "Qt will be looked for also in /usr/local/opt/qt")
#    elseif(ARCH_LINUX)
#        set(CMAKE_PREFIX_PATH "/opt/qt")
#        message(STATUS "Qt will be looked for also in /opt/qt/6.1.0")
#    endif()
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    set_property(SOURCE build_stamp.h PROPERTY SKIP_AUTOMOC ON)
    find_package(Qt6Widgets REQUIRED)
    if(ARCH_WINDOWS)
        # finds the windeployqt executable so that the binaries can be added
        find_program(WINDEPLOYQT_EXECUTABLE windeployqt HINTS "${_qt_bin_dir}")
    elseif(ARCH_MACOS)
        find_program(MACDEPLOYQT_EXECUTABLE macdeployqt HINTS "${_qt_bin_dir}")
    endif()
    # link with the QT libraries
    list(APPEND TPP_LINK_LIBRARIES Qt6::Widgets)
endif()

# Extra Dependencies Configuration
# ================================
#
# On Unix platforms, the pthreads library must be present. No extra steps are required for Windows. 
if(ARCH_UNIX)
    find_package(Threads REQUIRED)
    list(APPEND TPP_LINK_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
    if(NOT ARCH_MACOS)
        list(APPEND TPP_LINK_LIBRARIES stdc++fs)
    endif()
endif()

# The terminalpp executable
# =========================
#
# First, determine the terminalpp sources, which lie in this directory and the autogenerated stamp header file in the root directory.
file(GLOB_RECURSE SRC "*.cpp" "*.h" "${CMAKE_SOURCE_DIR}/stamp.h")

# Creates the executable. On Windows, the WIN32 GUI app has to be selected and the resources description must be added to the sources. On UNIX, the executable is straightforward. 
if(ARCH_WINDOWS)
    if(RENDERER_NATIVE)
        add_executable(terminalpp WIN32 ${SRC} "directwrite/terminalpp.rc" "directwrite/terminalpp.exe.manifest")
    else() # RENDERER_QT
        add_executable(terminalpp WIN32 ${SRC} "qt/terminalpp.qrc")
        # add QT dlls to the executable
        add_custom_command(TARGET terminalpp POST_BUILD
            COMMAND ${WINDEPLOYQT_EXECUTABLE} "$<TARGET_FILE:terminalpp>" "--release"
        )
    endif()
elseif(ARCH_MACOS)
    if(RENDERER_QT)
        # use custom plist file
        configure_file(${CMAKE_SOURCE_DIR}/packages/terminalpp/bundle/Info.plist ${CMAKE_BINARY_DIR}/packages/bundle/Info.plist @ONLY)
        # we can't target older versions because of the usage of std::filesystem
        set(CMAKE_OSX_DEPLOYMENT_TARGET 10.15)
        add_executable(terminalpp MACOSX_BUNDLE ${SRC} "qt/terminalpp.qrc" "${CMAKE_SOURCE_DIR}/resources/icons/bundle.icns")
        set_target_properties(
            terminalpp
            PROPERTIES
            RESOURCE "${CMAKE_SOURCE_DIR}/resources/icons/bundle.icns"
            MACOSX_BUNDLE_INFO_PLIST "${CMAKE_BINARY_DIR}/packages/bundle/Info.plist"
        )
        add_custom_command(TARGET terminalpp POST_BUILD
            COMMAND ${MACDEPLOYQT_EXECUTABLE} terminalpp.app
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        )
    endif()
elseif(ARCH_UNIX)
    if(RENDERER_NATIVE)
        add_executable(terminalpp ${SRC})
    elseif(RENDERER_QT)
        add_executable(terminalpp ${SRC} "qt/terminalpp.qrc")
    endif()
endif()

if(RENDERER_NATIVE OR RENDERER_QT)
    # On all platforms, terminalpp links against the ui and terminal libraries from the root folder.
    target_link_libraries(terminalpp ${TPP_LINK_LIBRARIES})
    add_dependencies(terminalpp stamp)


    # make install 
    if(INSTALL STREQUAL terminalpp AND ARCH_UNIX)
        if(ARCH_LINUX)
            # set the default terminalpp desktop file icon
            if(NOT DEFINED TERMINALPP_DESKTOP_ICON)
                set(TERMINALPP_DESKTOP_ICON "terminalpp.png")
            endif()
            # configure the desktop file
            configure_file(${CMAKE_SOURCE_DIR}/resources/terminalpp.desktop ${CMAKE_CURRENT_BINARY_DIR}/terminalpp.desktop @ONLY)
            install(FILES ${CMAKE_CURRENT_BINARY_DIR}/terminalpp.desktop DESTINATION share/applications)
            install(FILES ${CMAKE_SOURCE_DIR}/resources/icons/icon_48x48.png DESTINATION share/icons/hicolor/48x48/apps RENAME terminalpp.png)
            install(FILES ${CMAKE_SOURCE_DIR}/resources/icons/icon_64x64.png DESTINATION share/icons/hicolor/64x64/apps RENAME terminalpp.png)
            install(FILES ${CMAKE_SOURCE_DIR}/resources/icons/icon_128x128.png DESTINATION share/icons/hicolor/128x128/apps RENAME terminalpp.png)
            install(FILES ${CMAKE_SOURCE_DIR}/resources/icons/icon_256x256.png DESTINATION share/icons/hicolor/256x256/apps RENAME terminalpp.png)
        endif()
        install(TARGETS terminalpp DESTINATION bin COMPONENT terminalpp)
    endif()
endif()

